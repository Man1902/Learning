- Waterfall Model : Focous on documentations, processes and tools.Always follows a particlar plan.
  Requirment gathering and Analysis -> Design -> Implmentation(Coding) -> Test -> Deploy -> Maintenance 
- Limitation of Waterfall : 
  1) Change is difficult : Difficult to go back from the curerent stage 
  2) Not suitable when requirment change happens frequently 
  3) Difficult to produce working software without performing entire phases. 
  4) Requies more time : Time consumimng and have high amout of risk.
- Agile methodology : It promotes continuous iteration of development and testing throughout the software development lifecycle.
	In agile methodology each				All iterations should be 				At the end of each iteration,
	project is broken up into  <--------->  of the same time duration  <--------->  a working product should be
	several "Iterations" 					(between 3 to 4 weeks) 					delivered

	First Iteration (Discover -> Design -> Develop) <--> Second Iteration (Discover -> Design -> Develop) <--> Third Iteration (Discover -> Design -> Develop)
-  Waterfall Vs Agile
   1) Analyze -> Plan -> Design -> Build -> Test -> Deploy
   
   2) Analyze -> Plan -> (Design <-> Build <-> Test) -> Deploy  | Analyze -> Plan -> (Design <-> Build <-> Test) -> Deploy
    
              (1st Iteration)														(2nd Iteration)
- Agile values : 			  
 1) "Individuals and interactions" over processes and tools
 2) "Working software" over comprehensive documentation
 3) "Customer collaboration" over contract negotiation
 4) "Responding to change" over following a plan
- Agile Principles : 
 1) Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.
 2) Welcome changing requirements, even late in development. Agile processes harness change for the customer's competitive advantage.
 3) Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale.
 4) Business people and developers must work together daily throughout the project (DevOps).
 5) Build projects around motivated individuals.Give them the environment and support they need, and trust them to get the job done.
 6) The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.
 7) Working software is the primary measure of progress.
 8) Agile processes promote sustainable development.The sponsors, developers, and users should be able to maintain a constant pace indefinitely.
 9) Continuous attention to technical excellence and good design enhances agility.
10) Simplicity--the art of maximizing the amount of work not done--is essential.
11) The best architectures, requirements, and designs emerge from self-organizing teams.
12) At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly.
- MVP : Minimum value product.
- Agile framework : Scrum, kanban
- Limitation of Agile : Development team wants agility(wants change)  while operation team wants stabilty.(Gap between them)
- DevOps is a software development strategy which bridges the gap between  the Dev and the Ops side of the company.
- DevOps Stages : 
1) Version Control (Source Code management) : Maitains diffrent versions of the code
2) Continuous Integration (Continuous Build) : Compile,validate,Code review,Unit teting,Integration testing
3) Continuous Delivery (Continuous Testing) : Deploying the build applcation to test servers,performing UAT
4) Continuous Deployment (Configuration Management and containerization) :  Deployig the tested application on the production server for release.
5) Continuous Monitoring : 
-----------------------------------
1) Version Control : Git and GitHub 
----------------------------------- 
- Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later on.
- Why vwersion control system is required ? - For collaboration, Back up, Analyze
- Type of Version control system 1) Centralized 2) Distributed
				Distributed VCS 													Centralized VCS 
  * It creates a local repository to store everything locally			* It uses a centralized sever to store the changes in the source code.
    instead of using centralized sever.
 *  Network access is not mandatory for every operations.(Requires 		* Network is required for almost all operations
    only for Push/Pull between local and central repository)
 * In working PC, extra space is required for local repository			* In working PC, extra space is not required.
- Version control tools : 1) Git (distributed VCS,Provides local copy to every one) 2) sub version(svn) (centralized VCS : Don't provide local copy to everbody.
  They have to directly work with cenral repository) 
- Git is a distributed version control tool while GitHub is a distributed version control system server which allows Git to pull source code from central(Remote) 
  repository to local repository and to push source code from local repository to central repository.
- Here, Developer can commit/update source code from their working copy to local repository.(which can interact with central repository via pull/push operations)
- Git is written in C language.
- Featiures of Git : 
  1) Distributed : Allows distributed development of code.Every developer has a local copy of entire development history.
  2) Compatible : Compatible with existing system and protocol.SVN repositories can be direclty accessed using Git-SVN
  3) Non-linear : 
  4) Branching : can have multipe local branches which can be merger latter on to have production ready Master branch.
  5) Lightweight : Uses lossless compression technique
  6) Speed : Fetching data from local repository is 100 time faster than remote repository.
  7) Open Source : 
  8) Reliable : On event of system crash, the lost data can be easily recovered from any of the local repository of other developer.
  9) Secure : Uses SHA1 to name and identify objects.
 10) Ecconomical : Released under GPL's licence.
					Local																	  Remote
 -----------------------------------------------------------						-------------------------
 Working Directory		Staging Area		Local Repository								Remote Repository
		|					  |						|											|
		|---- Git Add ---->   |						|											|
		|					  |--- Git Commit ----> |											|
		|					  |						|--------------- Git Push --------------->	| 
		|					  |						|											|
		|					  |						|<-------------- Git Pull ----------------	|											
		| <--------------- Git Checkout	-----------	|
		|					  |						|
		| <--------------- Git Merge -------------- |
- Repository : A directory or storage space where your project's source code is stored.1) Local Repository : local to folder of developer's computer.
  2) Central(Remote) Repository : Store space on GitHub server.
- Branches are pointers to a specific commit.1) Local branches 2) Remote tracking branches 
- Merging is a way to combine the work of diffrent branches together.It Allows to branch off, develop a new feature and combine it back. 
- Rebasing is a way of combining the work between diffrent branches.It can be used to make a linear sequence of commits.

-- Commands
- GitHub Account : Mail : mymail@gmail.com Pwd : Vi2Fiwghat2@Wicn3h1an
- Open Git Bash from your local repository.
git init 									// To create local repository
git clone git@github.com:UserName/Demo.git	// To create local repository and clone data from central repository
git add Demofile1.txt  // To add file to the staging area.Before commit,file needs to be added to the Git index (staging area)
git add -A			   // OR git add . : to add all files 
git commit -m "adding first commit into local repo" 	// To commit file into local repo
git commit -a -m "commiting all file together"  		//To commit all file
git status				// to check the state of repository
git log
git log --oneline
ls
Cat Demofile1.txt				// to check the content of file
git branch firstbranch			// to create a new branch 
git checkout firstbranch		// To switch from one branch to another branch
git checkout -b firstbranch 	// to create and checkout new branch
git branch 						// To list down all present branches
git branch -d secondbranch		// To delete the branch
git merge firstbranch 			// to merge branches.execute this command from master branch.
git rebase master				// execute command from another branch (e.g firstbranch)
git rebase firstbranch			// execute command from master branch
git checkout 62cefc73 revert.txt // to revert back to specific version
git revert 62cefc73				 // to revert back to specific version
git revert HEAD					 //  to revert from last commit
ssh-keygen						// to generate public SSH key
ssh -T git@github.com
git remote add origin "https://github.com/UserName/Demo.git"		// To Sync with remote repo for push/pull/fetch
git push origin firstbranch 	// OR master : to push local repo branch into central repo
git pull origin master			// To update local repository from central repository
git stash -u 					// To put all un commited changes into stash to clean working directory
git stash list
git stash show
git stash apply
git config --global user.name "UserName" 
git config --global user.email "mail@id.com"

--------------------------
2) Continuous Integration
--------------------------
- Continuous Integration (CI) is a development practice in which the developers requires to commit souce code into a shared repository several times a day where
  Each check-in is then verified by an automated build, allowing teams to detect problems early. 
  commit code to a shared repositiry -> Jenkins Server -> Build (compile -> Code Review -> Unit Testing -> Integration Testing -> Package (WAR,JAR etc )
- Jenkins is an open source Continuous Integration tool.(written in java).Its job is to integrate various stage of DevOps.
- Steps to setup Jenkins : 
  1) download jenkins war file from : https://jenkins.io/download/
  2) Deploy jenkins war into tomcat server (by copying it inside %TOMCAT_HOME%\webapps folder)
  3) Start tomcat by executing startup.bat file (Path : %TOMCAT_HOME%\bin)
  4) Access jenkins server from the link http://localhost:8181/jenkins/ (port as per tomcat's server.xml)
  5) Enter username as admin and password from file .jenkins\secrets\initialAdminPassword
  6) change admin password from http://localhost:8080/jenkins/user/admin/configure.
  7) UserName and password : admin  (For me)
  8) Configure Proxy (if required)
  9) For Solving SSL Certificate (due to proxy), check "Use browser for metadata download" checkbox.(Path : Manage Jenkins -> Configure global security -> Plugin Manager)
 10) Install required plugins (Path : Manage Jenkins -> Manage Plugins -> Available tab) e.g Maven Integration,Deploy to container,SonarQuobe Scanner for jenkins
 11) Manage Jenkins -> Global Tool Configuration
 
- Jenkins has various pluggins to inegrate with diffrent tools.
- 
------------------------------------------------------------------------
4) Continuous Deployment (Configuration Management and containerization)
------------------------------------------------------------------------
01_DevOps -> 01_DevOps Tutorial For Beginners - DevOps Training - DevOps Tools - Edureka : Pending from 43 min

