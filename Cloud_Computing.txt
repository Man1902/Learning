- Cloud computing is the use of remote servers on the internet to store,manage and process data rather than a local server or your personal computer.
- Cloud Computing is a way for delivering services or resources on-demand.
- Cloud providers : AWS, Google clopd platform, Microsoft Azure etc
- Cloud Characteristics : 
1) Elasticity : 
2) On-denamd : 
3) Provided pooled computing resources 
4) Metered service usages : 
5) Broad network access : 
- Advantages of Cloud : Scalability, Collaboration, Security, Cost effective, Availability
- Cloud computing is enabled through these key factors. Cloud Datacenters, Virtualization, Cloud APIs, Cloud storage
- Virtualization Types : Hardware Virtualization, Software Virtualization, Storage Virtualization, Desktop Virtualization
- Cloud Service Models : 
1) IaaS (Infrastructure as a Service) (host): Combination of Physical server hardware,Physical storage, Networking components,Power,Cooling, Physical security
- In this model, Cloud provider owns the physical infrastructure, and offers it to you to host platform and the applications that run on it. 
- With IaaS, you are purchasing use of raw infrastructure. e.g AWS EC2 , GCP Compute Engine
2) PaaS (Platform as a Service) (build): Layer on top of phyhsical infrastructure,which provides virtualization of OS layer.No control ovet the underlying 
 architecture inclding OS, storage, servers etc.The cloud provider gives the ability to the customer to deploy customer created apps using programming language,
 tools etc that are provided by the Cloud provider. e.g AWS Elastic Beanstalk , GCP APP Engine
- With PaaS, you are purchasing use of say a Unix or a window host in virtual enviroment where in cloud provider manages installation of OS and hypervisor.
3) SaaS (Software as a Service) (consume) : to layer of the overall cloud infrastructure, which offer complete applications to the cloud user.
- In SaaS model, cloud provider, provides access and maintainance to the application, and you as a customer can make use of it.
- Cloud deployment model : 
1) Public Cloud : 
2) Private Cloud : 
3) Hybrid Cloud : 
4) Community Cloud : 
-------------------------------
Google cloud platform
-------------------------------
- Udemy : Google Professional Cloud Architect Certification !
  * Skip : 1 - 8 
- Google cloud platform is a suite of cloud computing services that runs on the same infrastructure that goolge uses internally for its end users products such
  as Google serach and Youtube.
- Regions : Independent geographic areas that consists of zones.Main purpose is to host applications near to your users to reduce latency, and availability,durability
- Zones : Physical locations inside regions.It provides geo redundancy.Used mainly for high availability inside region.
- GCP Services  : 
1) Compute : Compute Engine, App Engine, Kubernetes Engine, Cloud Functions
2) Storage : Datastore, Storage, Bigtable, SQL, Spanner
3) Networking : VPC Network, Network Services, Interconnect
4) Identity & Security : 
5) BigData : 
6) Machine Learning : 
- GCP Interfaces : 
  1) GCP Console (UI) / Mobile App
  2) Command line interface (Cloud Shell / Cloud SDK ): gcloud, bg, gsutil,kubectl etc
  3) API/Client libraries : IDE,eidtor,postman,curl etc
- GCP Project :  To track resource and quote usage.
  * Enable billing.Manage permissions and credientials. Enbale service and APIs.
  * Project use three identifying attributes : Project name,Project number, Project ID
  * Can be managed from cloud console or cloud resource manager API
- GCP Resources : 1) Zonal : VM instaces, VM discs etc 2) Regional : Static IP address 3) Global : Network,Disk images,Snapshots,Networks 

1) Compute Services : 
	* Virtal Machine : Server in cloud with auto scaling ,full control of OS.
	* Code & Container : Container orchestration,Deploy code.In build auto scaling and load balancing.
	* Serverless : No Ops env.Mostly you don't want to manage any H/W resources.
1.1) Compute Engine : IaaS 
	* Compute Engine : Row server.After choosing OS and desired configuration, We need to install necessary software to use it as per or requirement.eg as an 
	  application server.
	* Scalable, high-performance virtual machines (which are running in google's inovative data centers and world wide fiber network)
	* OS dependent, Full control on H/W & N/W , OS Level changes
1.2) App Engine : PaaS
	* Extention of Compute Engine.Generally used for web server configration.We don't have to install required software manually.
	* A flexible zero ops platform.
	* Just write code, No Ops dependencies , Scalable , Traffic splitting  
1.3) Container(Kubernetes) Engine : PaaS
    * Deploy,manage and scale containerized applications
	* No OS dependencies, Scalable production load
	* Kubernetes is container orchestration platform.
	* features : 
	  * Horizonatal scaling
	  * Self healing 
	  * Load balancing & service discovery 
	  * Automated roll outs & Roll backs
	  * Storage orchestration
	  * Bach execution
	  * Configuration management
	* Kubernetes Architecture : 
	  1) Kubernetes master node : 
	     1) API Server : 
		    *  provides all the operation on cluster using the API.
		 2) Scheduler : 
			* service in master responsible for distributing the workload.
			* responsible for workload utilization and allocating pod to available/new nodes.
		 3) etcd : 
		    * key value store that can be distributed among multiple nodes.
			* It stores the configuration information which can be used by each of the nodes in the cluster.
			* It is accessible only by Kubernetes API server as it may have some sensitive information.
		 4) Controller manager : 
		    * responsible for most of the collectors that regulates the state of cluster and performs a task.
			* responsible for collecting and sending information to API server
			* replication controller, endpoint controller, namespace controller, and service account controller.
	  2) Kubernetes node : 
         1) kube-proxy : 
		    * helps in making services available to the external host.
			* helps in forwarding the request to correct containers and is capable of performing primitive load balancing.
			* manages pods on node, volumes, secrets, creating new containers’ health checkup.
         2) Docker engine : 
         3) kubelet : 
		    * communicates with the master component to receive commands and work.
			* interacts with etcd store to read configuration details and write values
			* manages network rules, port forwarding
         4) Pod (Docker containers , Volume , IP Address) : node can have multiple pods
	* deployment strategis : 
      1) Recreate : 
	  2) Rolling Update : 
	  3) BlueGreen : 
	  4) Canary : 
    * commands :  
      1) mvn compile com.google.cloud.tools:jib-maven-plugin:build -Dimage=gcr.io/$GOOGLE_CLOUD_PROJECT/spring-boot-example:v1 		// gcr.io/my-first-project-254606/spring-boot-example:v1
	  2) gcloud container clusters get-credentials my-cluster-1 --zone us-central1-a		// to login into kubernetes cluster
	  3) kubectl get pods
	  4) kubectl get deployments
	  5) kubectl get services
	  6) kubectl get all
	  7) docker run -ti --rm -p 8080:8080 gcr.io/$GOOGLE_CLOUD_PROJECT/spring-boot-example:v1 // to run container locally inside kbernates 
	  8) kubectl run spring-boot-example --image=gcr.io/$GOOGLE_CLOUD_PROJECT/spring-boot-example:v1 --port=8080	// 1st Approach to create deployment and service object
	     kubectl expose deployment spring-boot-example --type=LoadBalancer	
	  9) kubectl apply -f deployment.yml		// 2nd Approach to create deployment and service object
	     kubectl apply -f service.yml
	 10) kubectl get svc -w
	 11) kubectl scale deployment spring-boot-example --replicas=3
	 12) kubectl log pod-name
	 13) kubectl delete deployment-name/service-name
1.4) Cloud Functions : SaaS
	* Event based serverless environment to build and connect cloud services.
	* Same as App Engine  but you do not host an application. Used for backend processing.

- Datastore : to store NoSQL (unstructured) kind of data.
- Bigtable : to store NoSQL (unstructured) kind of data.Used with hadoop (Bigdata application).
- Storage : File System storage service. Can be used to store application file in storage service.
- SQL :  to store structured data. SQL can not be scaled horizonally.
- Spanner : same as SQL but  it can be scaled horizonally.
- VPC Network : Virtual private cloud. To create an network where two application deployed on cloud can talk with each other.
- Network Services : Load balancing, Cloud DNS, Cloud CDN
- Interconnect : 

- Commands
gcloud init

gcloud sql connect mysql-instance1 --user=root
gcloud container clusters create webfrontend --zone $MY_ZONE --num-nodes 2
kubectl version
kubectl run nginx --image=nginx:1.10.0
kubectl expose deployment nginx --port 80 --type LoadBalancer
kubectl scale deployment nginx --replicas 3
-------------------------------
AWS
-------------------------------
https://drive.google.com/drive/folders/1oXWb6KHotsoS8EMc7ch0awL3HpNoGSLe

- Region is a geographical area (physical location).Each region consists of 2 (or more) Availability Zones.
- An Availability Zones (AZ) is simply a data center.
- Edge location : 
  * Edge locations are endpoints for AWS which are used for caching content.
  * Typically this consitst of CloudFront,Amazon's Content Delievery Network (CDN)
  * There are many more Edge locations than Regions. (96 currently)
- 