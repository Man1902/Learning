----- Junit 5 -----
- JUnit 5 = JUnit Platform + JUnit Jupiter + JUnit Vintage
- JUnit Platform : 
 * To be able to launch junit tests, IDEs, build tools or plugins need to include and extend platform APIs.
 * It defines the TestEngine API for developing new testing frameworks that runs on the platform.
 * It also provides a Console Launcher to launch the platform from the command line and build plugins Maven / Gradle.
- JUnit Jupiter : 
 * It includes new programming and extension models for writing tests. 
 * It has all new junit annotations and TestEngine implementation to run tests written with these annotations.
- JUnit Vintage : 
 * It’s primarly used for backward compatibility with JUnit 3 and JUnit 4.
- Annotations :  
  @BeforeAll : to invoke method(static void method) only once, before starting all the tests. (In JUnit4 : @BeforeClass)
  @BeforeEach : to invoke method before each test method. (In JUnit4 : @Before)
  @AfterEach  : to invoke method after each test method. In JUnit4 : @After)
  @AfterAll : to invoke method(static void method) only once, after finishing all the tests. (In JUnit4 : @AfterClass)
  @Test : to mark a method as junit test method.
  @DisplayName : to provide any custom display name for a test class or test method
  @Disabled : to disable or ignore a test class or method from test suite. (equivalent to @Ignored of JUnit4)
  @Nested : to create nested test classes
  @Tag : Mark test methods or test classes with tags for test discovering and filtering
  @TestFactory : Mark a method is a test factory for dynamic tests
- @RunWith(JUnitPlatform.class) and @SelectPackages and @SelectClasses annotations are used to create test suits (to run mutliple test classes)
- @IncludePackages / @ExcludePackages (to filter packages), @IncludeClassNamePatterns / @ExcludeClassNamePatterns (to filter test classes) and 
  @IncludeTags / @ExcludeTags (to filter test methods) annotations are used to for filtering test packages, classes or test methods.
-------------------

--- Current Version 4
- JUnit is an open-source unit testing framework.
- Annotations : 
  1) @Test                             : specifies method as test method
  2) @Test(timeout=1000)               :  method will be failed if it takes longer than 1 sec.
  3) @Test(expected = Exception.class) : used to test whether the code throws a desired exception or not
  4) @Ignore                           : to ignore the test 
  5) @BeforeClass                      : (public static void method) to invoke method only once, before starting all the tests
  6) @Before                           : to invoke method before each test
  7) @After                            : to invoke method before each test
  8) @AfterClass                          : to invoke method only once, after finishing all the tests
- "org.junit.Assert" class provides methods to assert the program logic.
  1) void assertEquals(boolean expected,boolean actual) // Overloaded
  2) void assertTrue(boolean condition)
  3) void assertFalse(boolean condition)
  4) void assertNull(Object obj)
  5) void assertNotNull(Object obj)
  6) void assertSame(Object expected, Object actual)
  7) void assertNotSame(Object expected, Object actual)
  8) void assertArrayEquals(expectedArray, resultArray) 
- Test suite is used to bundle a few unit test cases and run them together.
  e.g @RunWith(Suite.class) 
      @Suite.SuiteClasses({ TestJunit1.class, TestJunit2.class })
	  public class JunitTestSuite {}  	
- JUnitCore class is used to run the specified tests from the command line. e.g 
  Result result = JUnitCore.runClasses(new Class[]{TestJunit1.class,TestJunit2.class});   or   Result result = JUnitCore.runClasses(JunitTestSuite.class);
- Parameterized tests allow a developer to run the "same test" over and over again using different "values".
- Steps to create a parameterized test : 
 1) Annotate test class with @RunWith(Parameterized.class).
 2) Create a public static method annotated with @Parameterized.Parameters that returns a Collection of Objects (as Array) as test data set.
 3) Create a public constructor that takes in what is equivalent to one "row" of test data.
 4) Create an instance variable for each "column" of test data.
 5) Create your test case(s) using the instance variables as the source of the test data.
----------------------- Mockito ------------------------------------
- Mockito is a mocking framework, JAVA-based library that is used for effective unit testing of JAVA applications.
-* It uses Java Reflection in order to create mock objects for a given interface.Mock objects are nothing but proxy for actual implementations.
- Annotations : 
  1) @RunWith : to attaches a runner (MockitoJUnitRunner) with the test class to initialize the test data. e.g 
     @RunWith(MockitoJUnitRunner.class)  (class level)  OR   @Before public void init() { MockitoAnnotations.initMocks(this); } 
  2) @Mock : is used to create the mock object OR Mockito.mock(ServiceClass.class) 
  3) @Spy : is used to allow partial mock.We can mock a part of the object by stubbing few methods, while real method invocations will be used for the other.
  4) @InjectMocks : to create and inject the mock object of service class for which we are writing test cases.
1) Mockito.when() : 
   * to mock behavior of mock object 
   * Syntex : Mockito.when( mockObj.method ).thenReturn( returnVal ) or Mockito.doReturn(returnVal).when(mockObj).method 
		1) Mockito.when(customerDao.save(customerObj)).thenReturn(true)
		2) Mockito.when(customerDao.save(any(Customer.class))).thenReturn(true)
		3) Mockito.when(calcService.add(10,20)).thenReturn(30)
		4) Mockito.when(calcService.add(anyDouble(),any(Double.class))).thenReturn(30.0)
		5) Mockito.when(calcService.add(10,20)).thenThrow(new Exception("Error Message"))
		6) Mockito.doThrow(new Exception("Error Message")).when(calcService).add(10,20)
		7) Mockito.doReturn(30.0).when(calcService).add(10.0,20.0)
		8) Mockito.doNothing().when(productRepository).delete(5)		// void method
		9) Mockito.when(calcService.add(20.0,10.0)).thenAnswer(new Answer<Double>() {
				@Override
				public Double answer(InvocationOnMock invocation) throws Throwable {		// to allows stubbing with generic interface
					Object[] args = invocation.getArguments();
					Object mock = invocation.getMock();	
					return 30.0;
				}
		   });
   * we cannot mix matchers and actual objects.
   
2) Mockito.verify() : 
   * to ensure whether a mock method is being called or not.
		1) Mockito.verify(calcService).add(10.0, 20.0)
		2) Mockito.verify(calcService, times(2)).add(10.0, 20.0)
		3) Mockito.verify(calcService, never()).subtract(10.0, 20.0)
		4) Mockito.verify(calcService, atLeastOnce()).subtract(20.0, 10.0)
		5) Mockito.verify(calcService, atLeast(2)).add(10.0, 20.0) 
		6) Mockito.verify(calcService, atMost(3)).add(10.0,20.0)
		7) Mockito.verify(calcService,timeout(1000)).add(20.0,10.0)
		
- Mockito.reset(mockObj) : to a reset a mock object.
  
------------- Power Mockito -------------  
- PowerMock uses a custom classloader and bytecode manipulation to enable mocking of static methods, constructors, final classes and methods,
  private methods, removal of static initializers and more.
  * @PrepareForTest({ FinalMethodClass.class , StaticMethodClass.class , PrivateMethodClass })
1) Private method mocking : 
   
  
  
  
  // Case1 : static method
  PowerMockito.mockStatic(StaticMethodClass.class);
  PowerMockito.when(StaticMethodClass.getStaticMethod(Mockito.any(String.class))).thenReturn(1);
  // Case2 : final method
  FinalMethodClass finalMethodClassObj = PowerMockito.mock(FinalMethodClass.class);
  PowerMockito.when(finalMethodClassObj.getStrLength1(Mockito.any(String.class))).thenReturn(1);
  
public final class SampleService {
	public String methodMakingNonVoidPrivateMethodCall(String message) { return nonVoidPrivateMethod(message); }
	private String nonVoidPrivateMethod(String helloMessage) { return helloMessage + "private metohd content" ; }
	public void methodMakingVoidPrivateMethodCall() { voidPrivateMethod(); }
	private void voidPrivateMethod() { System.out.println("voidPrivateMethod stuff"); }
	public String methodMakingStaticNonVoidMethodCall(String message) { return SampleUtil.sayHello(message); }
	public String methodMakingStaticVoidMethodCall(String message) {
		SampleUtil.printHello(message);
		return "printed " + message;
	}
	public final String finalMethodCall(String message) { return message; 	}
}
public class SampleUtil {
	public static String sayHello(String message) { return message + "static metohd content" ; }
	public static void printHello(String message) { System.out.println("printing .. " + message); }
}

@RunWith(PowerMockRunner.class)
@PrepareForTest({SampleService.class,SampleUtil.class})
public class SampleServiceTest {
	@Spy
	private SampleService spySampleService = new SampleService();
	private SampleService realSampleService = new SampleService();
	@Test
	public void testMethodMakingNonVoidPrivateMethodCall() throws Exception {
		PowerMockito.doReturn("test test").when(spySampleService, "nonVoidPrivateMethod",Mockito.anyString()); // OR
		//PowerMockito.when(spySampleService, PowerMockito.method(SampleService.class, "nonVoidPrivateMethod", String.class)).withArguments(Mockito.anyString()).thenReturn("test test");
		Assert.assertEquals("test test", spySampleService.methodMakingNonVoidPrivateMethodCall("test"));
	}
	@Test
	public void testMethodMakingVoidPrivateMethodCall() throws Exception {
		//PowerMockito.doNothing().when(spySampleService, PowerMockito.method(SampleService.class, "voidPrivateMethod")); // to ignore void private metohd
		spySampleService.methodMakingVoidPrivateMethodCall();
		PowerMockito.verifyPrivate(spySampleService, Mockito.times(1)).invoke("voidPrivateMethod");
	}
	@Test
    public void testMethodMakingStaticNonVoidMethodCall() throws Exception {
		PowerMockito.mockStatic(SampleUtil.class);
		PowerMockito.when(SampleUtil.sayHello(Mockito.anyString())).thenReturn("test test");
        Assert.assertEquals("test test", spySampleService.methodMakingStaticNonVoidMethodCall("test")); // realSampleService can also be used
    }
    @Test
    public void testMethodMakingStaticVoidMethodCall() throws Exception {
    	PowerMockito.mockStatic(SampleUtil.class);
    	PowerMockito.doNothing().when(SampleUtil.class);
    	realSampleService.methodMakingStaticVoidMethodCall("test"); 
    }
	@Test
    public void testFinalMethodCall() {
        Mockito.when(mockSampleService.finalMethodCall(Mockito.anyString())).thenReturn("str from final method");
        Assert.assertEquals("str from final method", mockSampleService.finalMethodCall("test"));
    }
}